[위젯(Widget)]
- 정의
    1) 화면을 구성하는 요소 (== React 의 컴포넌트 == HTML 마크업)
    2) UI 를 구성하는 최소 단위
- 목적 : 여러 개의 위젯을 조립하여 하나의 화면/앱을 생성하기 위함(모듈화)

[StatelessWidget / StatefulWidget]
1. StatelessWidget(상태X) : 고정화면을 만드는 기본 위젯을 제공하는 클래스
    -> 한 번 출력된 화면은 불변(고정) => 리렌더링 불가
    -> 관리 클래스가 별도로 필요하지 않음
    -> 정적 UI
    <사용법>
    1) StatelessWidget 클래스 선언
    class 클래스명 extends StatelessWidget{
        @Override
        Widget build(BuildContext context){
          return 출력할 위젯 코드 ;
        }
     }
     2) main() 메소드에서 runApp() 을 통해 StatelessWidget 위젯 클래스 켜기
2. StatefulWidget(상태O) : 변하는 화면을 만드는 기본 위젯을 제공하는 클래스
    -> 한 번 출력된 화면은 불변(고정) => setState() 를 통해 리렌더링 가능
    -> !!! 상태를 관리하는 별도의 클래스 필수 !!!
    -> 동적 UI
    <사용법 (day03/example2 참고)>
    1) 상태를 관리하는 클래스 선언
        class 관리클래스명 extends StatefulWidget{
          연결할사용클래스명1 createState() => 연결할사용클래스명1();
          연결할사용클래스명2 createState() => 연결할사용클래스명2();
          연결할사용클래스명3 createState() => 연결할사용클래스명3();
          => 여러 개의 사용클래스 연결 가능
        }

      2) 상태를 사용하는 클래스 선언
        class 사용클래스명 extends State<관리클래스명>{
          return 출력할 위젯 코드;
        }

      3) main() 메소드에서 runApp() 을 통해 관리클래스 켜기 (사용클래스 XXX)

    <주요메소드>
    1) initState() : 위젯이 처음 생성될 때 실행되는 초기화 함수
        => 위젯의 탄생
        => 해당 메소드 실행 시 REST API 통신
      2) setState() : 상태를 변경하고 UI 를 리렌더링(다시 build() 메소드 실행)함 (주로 버튼과 많이 사용)
        => 위젯의 인생 (업데이트)
      3) dispose() : 위제싱 제거될 때 실행되는 함수
        => 위젯의 사망

※ 공통점 ※
.build() : 플러터에서 UI(함수)를 그리는 함수 (== react 의 .render()) => 추상메소드
    -> 개발자가 .build() 의 return 을 재정의하여 화면에 출력할 위젯을 작성


[레이아웃 주요 위젯]
1. MaterialApp() : 앱의 전체 위젯들의 틀을 정의하는 최상위 위젯
    -> 라우터 설정
    -> 테마 설정 예] 다크 모드 중
    -> 초기화 경로 설정
    <형식>
    MaterialApp(
        initialRoute : "경로" // 초기화 경로 설정
        routes : { // 라우터 경로 설정
            "경로" : (context) => 위젯명(),
            "경로" : (context) => 위젯명()
        }
    )
2. Scaffold() : 플러터에서 제공하는 가장 기본적인 앱의 레이아웃(헤더/메인/푸터 등)을 잡는 위젯
    -> 형식 : Scaffold(
                위젯명 : 위젯클래스()
             )
    -> 주의점 : 위젯명은 Scaffold 클래스가 제공하는 위젯명만 사용 가능
    1) 헤더 : appbar : AppBar(위젯명())
    2) 바디 : body : 위젯명()
    3) 푸터 : bottomNavigationBar: BottomAppBar()
3. Navigator.pushNamed(context, "경로", argumentes : 경로로전달할인자값) : 이벤트로 특정 경로 호출
    => 라우터를 통해 보낸 값을 가져오는 방법 : 타입 변수명 = ModalRoute.of(context)!.settings.arguments as 인자값의 타입;
                -> ModalRoute : 라이터가 화면 전환 시 사용되는 객체
                -> .of(context) : 위젯 트리에서 현재 위젯의 위치
                -> !.settings.arguments : 부모 위젯으로부터 전달받응ㄴ 매개변수를 반환
                -> as 인자값의 타입 : 가져올 인자값의 타입 지정

4. Navigator.pop(context) : 이벤트로 이전 경로 호출
5. Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder : (content) => 위젯명())
   )

   => 라우터의 가상경로를 통해 이동하는 방법과 달리 이전 페이지로 이동 불가

[일반 주요 위젯]
1. Text() : 가장 기본적인 텍스트 출력 위젯
2. Center() : 가로/세로 가운데 정렬
    -> 형식 : Center(child : 위젯명())
3. Column() : 하위 모든 요소들을 세로 배치
    -> children : [위젯명(), 위젯명()]
4. TextButton() : 텍스트 버튼을 제공하는 위젯
5. Expanded() : Column() 위젯이 출력에 사용하고 남은 공간을 모두 채워주는 위젯
6. ListVIew() : 스크롤이 가능한 목록(리스트) 위젯 (== HTML 의 ol, ul)
7. TextField() : 텍스트 입력 위젯
    -> maxLength : 입력 텍스트의 최대 길이 설정
    -> maxLines : 최대 입력 줄 수 제한 (입력에 따라 자동 확장됨)
8. SizedBox() : 빈공간을 만드는 위젯
    -> height : 높이 설정


[플러터의 기본 실행 조건]
1. void main(){ runApp(클래스명()) }
2. class 클래스명 extends StatelessWidget/StatefulWidget {
        @Override
        Widget build(BuildContext context){
            return 생성할 위젯 코드;
        }
   }

[로딩화면 구현]
1. 통신이 오기 전 까지 로딩
- showDialog(context: context,
          builder: (context) => Center(child: CircularProgressIndicator(),));
2. 통신 시 로딩 화면 종료
- Navigator.pop(context);

[Toast (알림메세지 구현) ]
1. 설치 : https://flutter.dev/ -> [fluttertoast] 검색 -> 적용 후 pug Gets


※ 다양한 위젯 제공 홈페이지 : https://flutter.dev/ ※